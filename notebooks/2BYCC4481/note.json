{
  "paragraphs": [
    {
      "text": "import org.apache.spark.ml.classification.LogisticRegression\r\nimport org.apache.spark.ml.param.ParamMap\r\nimport org.apache.spark.mllib.linalg.{Vector, Vectors}\r\nimport org.apache.spark.sql.Row\r\n\r\n// Prepare training data from a list of (label, features) tuples.\r\nval training \u003d sqlContext.createDataFrame(Seq(\r\n  (1.0, Vectors.dense(0.0, 1.1, 0.1)),\r\n  (0.0, Vectors.dense(2.0, 1.0, -1.0)),\r\n  (0.0, Vectors.dense(2.0, 1.3, 1.0)),\r\n  (1.0, Vectors.dense(0.0, 1.2, -0.5))\r\n)).toDF(\"label\", \"features\")",
      "dateUpdated": "Sep 28, 2016 9:52:48 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1475056355808_1317056301",
      "id": "20160928-095235_722759755",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.ml.classification.LogisticRegression\nimport org.apache.spark.ml.param.ParamMap\nimport org.apache.spark.mllib.linalg.{Vector, Vectors}\nimport org.apache.spark.sql.Row\ntraining: org.apache.spark.sql.DataFrame \u003d [label: double, features: vector]\n"
      },
      "dateCreated": "Sep 28, 2016 9:52:35 AM",
      "dateStarted": "Sep 28, 2016 9:52:48 AM",
      "dateFinished": "Sep 28, 2016 9:52:51 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// Create a LogisticRegression instance.  This instance is an Estimator.\r\nval lr \u003d new LogisticRegression()\r\n// Print out the parameters, documentation, and any default values.\r\nprintln(\"LogisticRegression parameters:\\n\" + lr.explainParams() + \"\\n\")",
      "dateUpdated": "Sep 28, 2016 9:53:05 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1475056368289_-530123168",
      "id": "20160928-095248_897844180",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "lr: org.apache.spark.ml.classification.LogisticRegression \u003d logreg_fed2ad499bb9\nLogisticRegression parameters:\nelasticNetParam: the ElasticNet mixing parameter, in range [0, 1]. For alpha \u003d 0, the penalty is an L2 penalty. For alpha \u003d 1, it is an L1 penalty (default: 0.0)\nfeaturesCol: features column name (default: features)\nfitIntercept: whether to fit an intercept term (default: true)\nlabelCol: label column name (default: label)\nmaxIter: maximum number of iterations (\u003e\u003d 0) (default: 100)\npredictionCol: prediction column name (default: prediction)\nprobabilityCol: Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities (default: probability)\nrawPredictionCol: raw prediction (a.k.a. confidence) column name (default: rawPrediction)\nregParam: regularization parameter (\u003e\u003d 0) (default: 0.0)\nstandardization: whether to standardize the training features before fitting the model (default: true)\nthreshold: threshold in binary classification prediction, in range [0, 1] (default: 0.5)\nthresholds: Thresholds in multi-class classification to adjust the probability of predicting each class. Array must have length equal to the number of classes, with values \u003e\u003d 0. The class with largest value p/t is predicted, where p is the original probability of that class and t is the class\u0027 threshold. (undefined)\ntol: the convergence tolerance for iterative algorithms (default: 1.0E-6)\nweightCol: weight column name. If this is not set or empty, we treat all instance weights as 1.0. (default: )\n\n"
      },
      "dateCreated": "Sep 28, 2016 9:52:48 AM",
      "dateStarted": "Sep 28, 2016 9:53:05 AM",
      "dateFinished": "Sep 28, 2016 9:53:07 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// We may set parameters using setter methods.\r\nlr.setMaxIter(10)\r\n  .setRegParam(0.01)",
      "dateUpdated": "Sep 28, 2016 9:53:46 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1475056385580_198822756",
      "id": "20160928-095305_1380608921",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res16: lr.type \u003d logreg_fed2ad499bb9\n"
      },
      "dateCreated": "Sep 28, 2016 9:53:05 AM",
      "dateStarted": "Sep 28, 2016 9:53:46 AM",
      "dateFinished": "Sep 28, 2016 9:53:47 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// Learn a LogisticRegression model.  This uses the parameters stored in lr.\r\nval model1 \u003d lr.fit(training)\r\n// Since model1 is a Model (i.e., a Transformer produced by an Estimator),\r\n// we can view the parameters it used during fit().\r\n// This prints the parameter (name: value) pairs, where names are unique IDs for this\r\n// LogisticRegression instance.\r\nprintln(\"Model 1 was fit using parameters: \" + model1.parent.extractParamMap)",
      "dateUpdated": "Sep 28, 2016 9:53:56 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1475056426604_1594753062",
      "id": "20160928-095346_1017753226",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "model1: org.apache.spark.ml.classification.LogisticRegressionModel \u003d logreg_fed2ad499bb9\nModel 1 was fit using parameters: {\n\tlogreg_fed2ad499bb9-elasticNetParam: 0.0,\n\tlogreg_fed2ad499bb9-featuresCol: features,\n\tlogreg_fed2ad499bb9-fitIntercept: true,\n\tlogreg_fed2ad499bb9-labelCol: label,\n\tlogreg_fed2ad499bb9-maxIter: 10,\n\tlogreg_fed2ad499bb9-predictionCol: prediction,\n\tlogreg_fed2ad499bb9-probabilityCol: probability,\n\tlogreg_fed2ad499bb9-rawPredictionCol: rawPrediction,\n\tlogreg_fed2ad499bb9-regParam: 0.01,\n\tlogreg_fed2ad499bb9-standardization: true,\n\tlogreg_fed2ad499bb9-threshold: 0.5,\n\tlogreg_fed2ad499bb9-tol: 1.0E-6,\n\tlogreg_fed2ad499bb9-weightCol: \n}\n"
      },
      "dateCreated": "Sep 28, 2016 9:53:46 AM",
      "dateStarted": "Sep 28, 2016 9:53:56 AM",
      "dateFinished": "Sep 28, 2016 9:53:59 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// We may alternatively specify parameters using a ParamMap,\r\n// which supports several methods for specifying parameters.\r\nval paramMap \u003d ParamMap(lr.maxIter -\u003e 20)\r\n  .put(lr.maxIter, 30) // Specify 1 Param.  This overwrites the original maxIter.\r\n  .put(lr.regParam -\u003e 0.1, lr.threshold -\u003e 0.55) // Specify multiple Params.\r\n\r\n// One can also combine ParamMaps.\r\nval paramMap2 \u003d ParamMap(lr.probabilityCol -\u003e \"myProbability\") // Change output column name\r\nval paramMapCombined \u003d paramMap ++ paramMap2",
      "dateUpdated": "Sep 28, 2016 9:54:30 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1475056436395_680051685",
      "id": "20160928-095356_187840986",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "paramMap: org.apache.spark.ml.param.ParamMap \u003d \n{\n\tlogreg_fed2ad499bb9-maxIter: 30,\n\tlogreg_fed2ad499bb9-regParam: 0.1,\n\tlogreg_fed2ad499bb9-threshold: 0.55\n}\nparamMap2: org.apache.spark.ml.param.ParamMap \u003d \n{\n\tlogreg_fed2ad499bb9-probabilityCol: myProbability\n}\nparamMapCombined: org.apache.spark.ml.param.ParamMap \u003d \n{\n\tlogreg_fed2ad499bb9-maxIter: 30,\n\tlogreg_fed2ad499bb9-probabilityCol: myProbability,\n\tlogreg_fed2ad499bb9-regParam: 0.1,\n\tlogreg_fed2ad499bb9-threshold: 0.55\n}\n"
      },
      "dateCreated": "Sep 28, 2016 9:53:56 AM",
      "dateStarted": "Sep 28, 2016 9:54:30 AM",
      "dateFinished": "Sep 28, 2016 9:54:32 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// Now learn a new model using the paramMapCombined parameters.\r\n// paramMapCombined overrides all parameters set earlier via lr.set* methods.\r\nval model2 \u003d lr.fit(training, paramMapCombined)\r\nprintln(\"Model 2 was fit using parameters: \" + model2.parent.extractParamMap)",
      "dateUpdated": "Sep 28, 2016 9:54:46 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1475056470045_2106361830",
      "id": "20160928-095430_623884523",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "model2: org.apache.spark.ml.classification.LogisticRegressionModel \u003d logreg_fed2ad499bb9\nModel 2 was fit using parameters: {\n\tlogreg_fed2ad499bb9-elasticNetParam: 0.0,\n\tlogreg_fed2ad499bb9-featuresCol: features,\n\tlogreg_fed2ad499bb9-fitIntercept: true,\n\tlogreg_fed2ad499bb9-labelCol: label,\n\tlogreg_fed2ad499bb9-maxIter: 30,\n\tlogreg_fed2ad499bb9-predictionCol: prediction,\n\tlogreg_fed2ad499bb9-probabilityCol: myProbability,\n\tlogreg_fed2ad499bb9-rawPredictionCol: rawPrediction,\n\tlogreg_fed2ad499bb9-regParam: 0.1,\n\tlogreg_fed2ad499bb9-standardization: true,\n\tlogreg_fed2ad499bb9-threshold: 0.55,\n\tlogreg_fed2ad499bb9-tol: 1.0E-6,\n\tlogreg_fed2ad499bb9-weightCol: \n}\n"
      },
      "dateCreated": "Sep 28, 2016 9:54:30 AM",
      "dateStarted": "Sep 28, 2016 9:54:46 AM",
      "dateFinished": "Sep 28, 2016 9:54:51 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// Prepare test data.\r\nval test \u003d sqlContext.createDataFrame(Seq(\r\n  (1.0, Vectors.dense(-1.0, 1.5, 1.3)),\r\n  (0.0, Vectors.dense(3.0, 2.0, -0.1)),\r\n  (1.0, Vectors.dense(0.0, 2.2, -1.5))\r\n)).toDF(\"label\", \"features\")",
      "dateUpdated": "Sep 28, 2016 9:54:54 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1475056486636_104143878",
      "id": "20160928-095446_1375669276",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "test: org.apache.spark.sql.DataFrame \u003d [label: double, features: vector]\n"
      },
      "dateCreated": "Sep 28, 2016 9:54:46 AM",
      "dateStarted": "Sep 28, 2016 9:54:55 AM",
      "dateFinished": "Sep 28, 2016 9:54:56 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// Make predictions on test data using the Transformer.transform() method.\r\n// LogisticRegression.transform will only use the \u0027features\u0027 column.\r\n// Note that model2.transform() outputs a \u0027myProbability\u0027 column instead of the usual\r\n// \u0027probability\u0027 column since we renamed the lr.probabilityCol parameter previously.\r\nmodel2.transform(test)\r\n  .select(\"features\", \"label\", \"myProbability\", \"prediction\")\r\n  .collect()\r\n  .foreach { case Row(features: Vector, label: Double, prob: Vector, prediction: Double) \u003d\u003e\r\n    println(s\"($features, $label) -\u003e prob\u003d$prob, prediction\u003d$prediction\")\r\n  }",
      "dateUpdated": "Sep 28, 2016 9:55:04 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1475056494981_1385373040",
      "id": "20160928-095454_1961742407",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "([-1.0,1.5,1.3], 1.0) -\u003e prob\u003d[0.05707304171034067,0.9429269582896593], prediction\u003d1.0\n([3.0,2.0,-0.1], 0.0) -\u003e prob\u003d[0.923852231170412,0.076147768829588], prediction\u003d0.0\n([0.0,2.2,-1.5], 1.0) -\u003e prob\u003d[0.1097277611477977,0.8902722388522022], prediction\u003d1.0\n"
      },
      "dateCreated": "Sep 28, 2016 9:54:54 AM",
      "dateStarted": "Sep 28, 2016 9:55:04 AM",
      "dateFinished": "Sep 28, 2016 9:55:07 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1475056504383_815726840",
      "id": "20160928-095504_269332845",
      "dateCreated": "Sep 28, 2016 9:55:04 AM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "SparkExamples_EstimatorTransformerParam",
  "id": "2BYCC4481",
  "angularObjects": {
    "2BVBBXM7F:shared_process": []
  },
  "config": {},
  "info": {}
}